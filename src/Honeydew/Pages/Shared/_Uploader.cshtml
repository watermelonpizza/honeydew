<noscript class="block border-l-4 border-red-500 p-2 sm:p-4 text-lg bg-red-200 text-red-500">Javascript is required to upload</noscript>

<div class="upload-bar grid grid-cols-1 grid-rows-1 p-2 rounded bg-purple-600 text-purple-100">
    <div id="uploadDone" class="upload-status flex flex-col md:flex-row md:items-center px-2 col-start-1 row-start-1 transition-opacity duration-700 hidden pointer-events-none">
        <span class="inline-block text-purple-200 mr-1">Complete! Linky:</span>
        <span class="flex items-center">
            <a id="completeFileUrlLink" href="" target="_blank" class="inline-block mr-2 text-white hover:text-purple-100">Getting url...</a>
            <i class="fas fa-external-link-alt"></i>
        </span>
        <div class="flex-grow"></div>
        <button class="inline-block mt-4 md:mt-0 md:ml-2 cursor-pointer whitespace-no-wrap" onclick="resetUpload()">Upload another?</button>
    </div>

    <div id="uploadProgress" class="upload-status flex flex-col justify-center px-2 col-start-1 row-start-1 transition-opacity duration-700 hidden pointer-events-none">
        <div class="md:flex items-center mb-2">
            <div class="inline-block text-purple-200 mr-1">Uploading</div>
            <div>
                <a id="fileUrlLink" href="" target="_blank" class="inline-block mr-2 text-white hover:text-purple-100">Getting url...</a>
                <i class="fas fa-external-link-alt"></i>
                <span id="progressPercentage" class="inline-block ml-4 text-purple-200">0%</span>
            </div>
        </div>

        <div class="flex h-px bg-purple-400 rounded w-full">
            <div id="progressBar" class="flex bg-white transition-all duration-500 ease-linear" role="progressbar" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
    </div>

    <div id="uploadInput" class="upload-status flex items-center col-start-1 row-start-1 transition-opacity duration-700">
        <input id="fileInput" type="file" name="files" class="absolute opacity-0" style="z-index:-1;" />
        <label for="fileInput" class="file-input-select-button mr-6 md:mr-0 inline-block pl-3 md:pl-4 cursor-pointer whitespace-no-wrap">
            <i class="mr-3 md:mr-4 fas fa-magic"></i>
            <span class="uppercase tracking-normal md:tracking-widest whitespace-no-wrap">
                <span class="hidden md:inline">Start the magic</span>
                <span class="md:hidden">Upload</span>
            </span>
        </label>

        <div class="hidden md:flex items-center font-thin mx-10">
            <span class="upload-or-left-chevron">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="0.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevrons-left"><polyline points="11 17 6 12 11 7"></polyline><polyline points="18 17 13 12 18 7"></polyline></svg>
            </span>
            <span class="mx-3">OR</span>
            <span class="upload-or-right-chevron">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="0.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevrons-right"><polyline points="13 17 18 12 13 7"></polyline><polyline points="6 17 11 12 6 7"></polyline></svg>
            </span>
        </div>

        <input class="flex-grow min-w-0 px-4 py-2 bg-purple-500 text-purple-100 placeholder-purple-200 focus:bg-purple-100 focus:text-purple-700 outline-none" placeholder="Paste a url (not implemented yet)" autocomplete="off" spellcheck="false" />
    </div>
</div>

<script src="https://unpkg.com/tus-js-client@2.1.1/./dist/tus.min.js"></script>


<style>
    .box__dragndrop,
    .box__uploading,
    .box__success,
    .box__error {
        display: none;
    }

    .box.has-advanced-upload {
        background-color: white;
        outline: 2px dashed black;
        outline-offset: -10px;
    }

        .box.has-advanced-upload .box__dragndrop {
            display: inline;
        }
</style>

<script>
    //const $form = document.getElementById('uploadForm');
    //var isAdvancedUpload = function () {
    //    var div = document.createElement('div');
    //    return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && 'FormData' in window && 'FileReader' in window;
    //}();

    //if (isAdvancedUpload) {
    //    // ...
    //    document.body.classList.add
    //    $form.classList.add('has-advanced-upload');

    //    $form.addEventListener('dragover dragenter', () => {
    //        $form.classList.add('is-dragover');
    //    });

    //    $form.addEventListener('dragleave dragend drop', () => {
    //        $form.classList.remove('is-dragover');
    //    });

    //    $form.addEventListener('drop', (e) => {
    //        droppedFiles = e.originalEvent.dataTransfer.files;
    //    });

    //    $form.addEventListener('drag dragstart dragend dragover dragenter dragleave drop', (e) => {
    //        e.preventDefault();
    //        e.stopPropagation();
    //    });

    //}

    const uploadInput = document.getElementById("uploadInput");
    const uploadProgress = document.getElementById("uploadProgress");
    const uploadDone = document.getElementById("uploadDone");


    const progressBar = document.getElementById("progressBar");
    const progressPercentage = document.getElementById("progressPercentage");

    function resetUpload() {
        uploadInput.classList.remove("hidden", "pointer-events-none");
        uploadProgress.classList.add("hidden", "pointer-events-none");
        uploadDone.classList.add("hidden", "pointer-events-none");
    }

    document.getElementById('fileInput')
        .addEventListener('change', (e) => {
            console.log('changes!!!!');
            // Get the selected file from the input element
            const file = e.target.files[0];

            // Create a new tus upload
            const upload = new tus.Upload(file, {
                // Endpoint is the upload creation URL from your tus server
                endpoint: '/api/tusupload',
                // Retry delays will enable tus-js-client to automatically retry on errors
                retryDelays: [0, 3000, 5000, 10000, 20000],
                // Attach additional meta data about the file for the server
                metadata: {
                    name: file.name,
                    mediaType: file.type
                },
                // Callback for errors which cannot be fixed using retries
                onError: (error) => {
                    console.log(`Failed because: ${error}`);
                },
                // Callback for reporting upload progress
                onProgress: (bytesUploaded, bytesTotal) => {
                    const percentage = (bytesUploaded / bytesTotal * 100).toFixed(2);

                    progressBar.style.width = percentage + "%";
                    progressPercentage.innerText = Math.round(percentage) + "%";

                    console.log(bytesUploaded, bytesTotal, percentage + "%");
                },
                // Callback for once the upload is completed
                onSuccess: () => {
                    console.log("Download %s from %s", upload.file.name, upload.url);

                    document.getElementById('fileInput').value = null;

                    progressBar.style.width = "0%";
                    progressPercentage.innerText = "0%";

                    uploadInput.classList.add("hidden", "pointer-events-none");
                    uploadProgress.classList.add("hidden", "pointer-events-none");
                    uploadDone.classList.remove("hidden", "pointer-events-none");
                },
                onAfterResponse: (req, res) => {
                    const location = res.getHeader("Location");

                    if (location) {
                        const split = location.split('/');
                        const fileId = split[split.length - 1];

                        const anchor = document.getElementById('fileUrlLink');
                        const completeAnchor = document.getElementById('completeFileUrlLink');
                        anchor.href = `/${fileId}`;
                        completeAnchor.href = `/${fileId}`;

                        anchor.innerText = `${file.name} (${fileId})`;
                        completeAnchor.innerText = `${window.location.href}${fileId}`;
                    }
                }
            });

            uploadInput.classList.add("hidden", "pointer-events-none");
            uploadProgress.classList.remove("hidden", "pointer-events-none");

            // Start the upload
            upload.start();
        })
</script>
