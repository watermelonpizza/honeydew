@page
@using Microsoft.AspNetCore.Authorization
@model IndexModel
@attribute [Authorize]

@{
    ViewData["Title"] = "Home page";
}

<div class="mb-4">
    <partial name="_Uploader" />
</div>

<div class="p-4">
    <div class="space-y-4">
        @foreach (var upload in Model.UserUploads)
        {
            var link = Url.PageLink("Upload", values: new { id = upload.Id });
            var patchLink = Url.Action("PatchUpload", "Upload", new { id = upload.Id });

            <div class="p-4 mx-auto max-w-3xl sm:flex items-start justify-between shadow hover:shadow-lg transform transition-all duration-100 ease-in-out hover:-translate-y-1 rounded bg-white">
                <div class="flex-grow mb-4 sm:mb-0 sm:mr-8">
                    <div class="form-group mb-4">
                        <input class="form-input" value="@upload.Name" onchange="updateName(`@patchLink`, this)" autocomplete="off" spellcheck="false" />
                        <label class="form-attachment">@upload.Extension</label>
                    </div>

                    <a class="h-full" asp-page="Upload" asp-route-id="@upload.Id">@link</a>
                </div>

                <div class="flex sm:block items-stretch sm:justify-end">
                    @if (MediaTypeHelpers.ParseMediaType(upload.MediaType) == MediaType.Text)
                    {
                        <select class="sm:w-full form-select mr-2 sm:mr-0 sm:mb-2"
                                name="CodeLanguage"
                                asp-items="CodeLanguageHelper.GetLanguages(upload.CodeLanguage)"
                                onchange="updateCodeLanguage(`@patchLink`, this)">
                        </select>
                    }
                    else
                    {
                        <span class="flex-grow"></span>
                    }

                    <partial name="_UploadActionButtons" model="upload" />
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function updateCodeLanguage(url, select) {
            const codeLanguage = select.value;

            select.disabled = true;
            select.classList.add('loading');

             patch(url, { @nameof(PatchUploadModel.CodeLanguage): codeLanguage })
                .catch(err => console.log(err))
                .finally(() => {
                    input.disabled = false;
                    input.classList.remove('loading');
                });
        }

        function updateName(url, input) {
            const value = input.value;

            input.disabled = true;
            input.classList.add('loading');

            patch(url, { @nameof(PatchUploadModel.Name): value })
                .catch(err => console.log(err))
                .finally(() => {
                    input.disabled = false;
                    input.classList.remove('loading');
                });
        }
    </script>
}