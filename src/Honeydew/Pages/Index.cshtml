@page
@using Microsoft.AspNetCore.Authorization
@model IndexModel
@attribute [Authorize]

@{
    ViewData["Title"] = "Home page";
}

<div class="m-2 sm:m-4">
    <partial name="_UploaderPartial" />
</div>

<div class="p-2 sm:p-4">
    <div class="space-y-3">
        @if (!Model.UserUploads.Any())
        {
            <div class="my-8 text-3xl text-gray-700 text-center">😲 You don't have any uploads! Upload something to get started.</div>
        }

        @foreach (var upload in Model.UserUploads)
        {
            var link = Url.PageLink("Upload", values: new { id = upload.Id });
            var patchLink = Url.Action("PatchUpload", "Upload", new { id = upload.Id });

            <div class="upload-item p-2 sm:p-4 mx-auto max-w-3xl shadow hover:shadow-lg transform transition-all duration-100 ease-in-out rounded bg-white">
                <div class="sm:flex mb-2 sm:mb-4">
                    <div class="flex flex-grow items-stretch @(MediaTypeHelpers.ParseMediaType(upload.MediaType) == MediaType.Text ? "mb-2 sm:mb-0 sm:mr-4" : "")">
                        <input class="py-1 px-2 form-input flex-grow text-sm rounded-r-none border-gray-200 focus:border-gray-400 active:border-gray-400 outline-none" value="@upload.Name" onchange="updateName(`@patchLink`, this)" autocomplete="off" spellcheck="false" />
                        <label class="px-2 flex items-center text-sm border-t border-r border-b rounded rounded-l-none bg-gray-100 text-gray-600">@upload.Extension</label>
                    </div>

                    @if (MediaTypeHelpers.ParseMediaType(upload.MediaType) == MediaType.Text)
                    {
                        <div>
                            <select class="sm:w-full form-select py-1 px-2 mr-2 text-sm sm:mr-0"
                                    name="CodeLanguage"
                                    asp-items="CodeLanguageHelpers.GetLanguages(upload.CodeLanguage)"
                                    onchange="updateCodeLanguage(`@patchLink`, this)">
                            </select>
                        </div>
                    }
                </div>

                <div class="sm:flex items-center justify-between">
                    <div class="mb-4 sm:mb-0 sm:mr-4">
                        <a class="h-full" asp-page="Upload" asp-route-id="@upload.Id">@link</a>
                    </div>

                    <div class="flex items-stretch h-100">
                        <partial name="_UploadActionButtonsPartial" model="upload" />

                        @if (Model.AllowDeletion)
                        {
                            <button class="link flex items-center border-red-500 hover:text-red-700 text-red-500 ml-2 h-8 px-2 border rounded" onclick="deleteUpload(`@Url.Action("DeleteUpload", "Upload", values: new { Id = upload.Id })`, this)" title="Delete Upload">
                                <i class="trash-icon fas fa-trash-alt"></i>
                                <i class="undo-icon hidden fas fa-undo"></i>
                                <span class="text hidden lg:inline ml-2">Delete</span>
                            </button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function updateCodeLanguage(url, select) {
            const codeLanguage = select.value;

            select.disabled = true;
            select.classList.add('loading');

             patch(url, { @nameof(PatchUploadModel.CodeLanguage): codeLanguage })
                .catch(err => console.log(err))
                .finally(() => {
                    select.disabled = false;
                    select.classList.remove('loading');
                });
        }

        function updateName(url, input) {
            const value = input.value;

            input.disabled = true;
            input.classList.add('loading');

            patch(url, { @nameof(PatchUploadModel.Name): value })
                .catch(err => console.log(err))
                .finally(() => {
                    input.disabled = false;
                    input.classList.remove('loading');
                });
        }

    @if (Model.AllowDeletion)
    {
<text>
        function deleteRow(subitem) {
            const parent = subitem.closest(".upload-item")

            if (parent) {
                parent.remove();
            }
        }

        let timeouts = {};

        function deleteUpload(url, button) {
            button.disabled = true;
            button.classList.add('loading');

            fetch(url, { method: 'DELETE' })
                .then(() => {
                    @if (Model.ScheduledDeletion)
                    {
<text>
                    const trashIcon = button.querySelector(".trash-icon");
                    const undoIcon = button.querySelector(".undo-icon");
                    const text = button.querySelector(".text");

                    if (button.classList.contains("pending-undo")) {
                        clearTimeout(timeouts[url]);

                        button.classList.remove("pending-undo");

                        trashIcon.classList.remove("hidden");
                        undoIcon.classList.add("hidden");
                        text.innerText = "Delete";
                    } else {
                        button.classList.add("pending-undo");

                        trashIcon.classList.add("hidden");
                        undoIcon.classList.remove("hidden");
                        text.innerText = "Undo";

                        @* once the thing is deleted the server, delete the row if the container still exists on the page *@
                        timeouts[url] = setTimeout(() => {
                            deleteRow(button);
                        }, @(Model.ScheduledDeletionTime * 1000));
                    }
</text>
                    }
                    else
                    {
<text>
                    deleteRow(button);
</text>
                    }
                })
                .catch(err => {
                    console.error(err);
                })
                .finally(() => {
                    button.disabled = false;
                    button.classList.remove('loading');
                });
        }
</text>
    }
    </script>
}