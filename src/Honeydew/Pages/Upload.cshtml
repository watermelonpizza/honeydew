@page "/{id}"
@using Honeydew.Models
@model Honeydew.Pages.UploadModel
@{
    ViewData["HideHeader"] = true;
}

<div class="flex justify-center">
    @if (Model.Upload == null)
    {
        Response.StatusCode = 404;
        ViewData["Title"] = "Not Found";

        <div class="my-16 text-center">
            <h1 class="text-2xl mb-4">Nothing here!</h1>
            <div class="text-gray-600">This upload is swimmin' with the fishes.</div>
        </div>

        return;
    }


    @if (Model.Upload.Status == UploadStatus.Pending)
    {
        Response.StatusCode = 202; // HTTP 202 Accepted [The request has been accepted for processing, but the processing has not been completed]
        ViewData["Title"] = "Waiting for Upload: " + Model.Upload.Name;

        var random = new System.Security.Cryptography.RNGCryptoServiceProvider();
        var bytes = new byte[60 * 60];
        random.GetBytes(bytes);

        @section Head {
            <meta http-equiv="refresh" content="1">
        }

        <div class="my-16 text-center">
            <h1 class="text-2xl mb-4">A little too eager there.</h1>
            <div class="mb-2 text-gray-600">
                I'm still ingesting the bits. <span class="text-purple-500">Beep beep boop.</span>
            </div>

            <div class="">
                @for (int i = 0; i < 15; i++)
                {
                    <code class="block">
                        @for (int j = 0; j < 30; j++)
                        {
                            var yes = bytes[i + (j * 15)] > 128;
                            var two = bytes[i + (j * 15)] > 254 && bytes[i + (j * 15) + 1] > 245;

                            <span class="leading-1 inline-block @(two ? "text-red-500 font-bold" : (yes ? "text-gray-800": "text-gray-600"))">@(two ? "2" : (yes ? "1" : "0"))</span>
                        }
                    </code>
                }
            </div>


            <div class="mt-10 text-gray-500">
                The page will refresh until it's done.
            </div>
        </div>

        return;
    }

    @{
        var rawUrl = Url.ActionLink("Raw", "Upload", new { id = Model.Id });
        var embedUrl = Url.PageLink("Embed", values: new { id = Model.Id });

        ViewData["Title"] = Model.Upload.Name;
        ViewData["og:description"] = "";
        ViewData["og:type"] = MediaTypeHelpers.GetOpenGraphTypeFromMediaType(Model.MediaTypeCategory);
    }

    <div class="upload-container flex flex-col items-stretch bg-white shadow">
        @switch (Model.MediaTypeCategory)
        {
            case Models.MediaType.Application:

                <object class="w-full" type="@Model.Upload.MediaType" data="@rawUrl"></object>

                break;
            case Models.MediaType.Audio:
                @section Head {
                    <meta name="twitter:card" content="player">
                    <meta name="twitter:player" content="@embedUrl">
                    <meta name="twitter:player:width" content="480">
                    <meta name="twitter:player:height" content="270">

                    <meta property="og:audio:url" content="@embedUrl" />
                    <meta property="og:audio:secure_url" content="@embedUrl" />
                    <meta property="og:audio:type" content="text/html" />

                }

                <div class="m-4">
                    <audio class="w-full" src="@rawUrl" controls autoplay></audio>
                </div>

                break;
            case Models.MediaType.Image:
                ViewData["og:image"] = rawUrl;

                @section Head {
                    <meta name="twitter:card" content="summary_large_image">

                    <meta property="og:image:type" content="@Model.Upload.MediaType" />
                }

                <img src="@rawUrl" class="img" />

                break;
            case Models.MediaType.Text:

                <div id="monacoContainer" style="min-height: 70vh; max-height: 70vh;"></div>

                @section Scripts {
                    <script src="~/js/monaco/loader.js"></script>
                    <script>
                        require.config({ paths: { 'vs': '/js/monaco/' } });

                        require(['vs/editor/editor.main'], function () {
                            fetch('@rawUrl')
                                .then(async res => {
                                    const text = await res.text();
                                    monaco.editor.create(document.getElementById('monacoContainer'), {
                                        value: text,
                                        language: `@Model.Upload.CodeLanguage`,
                                        readOnly: true,
                                        minimap: {
                                            enabled: false
                                        },
                                        automaticLayout: true
                                    });
                                })
                                .catch(err => console.error(err));
                        });
                    </script>
                }

                break;
            case Models.MediaType.Video:
                @section Head {
                    <meta name="twitter:card" content="player">
                    <meta name="twitter:player" content="@embedUrl">
                    <meta name="twitter:player:width" content="480">
                    <meta name="twitter:player:height" content="270">

                    <meta property="og:video:url" content="@embedUrl" />
                    <meta property="og:video:secure_url" content="@embedUrl" />
                    <meta property="og:video:type" content="text/html" />
                    <meta property="og:video:width" content="480" />
                    <meta property="og:video:height" content="270" />

                    <link rel="alternate" type="application/json+oembed" href="@Html.Raw(Url.ActionLink("OEmbed", "Upload", new { format = "json", url = Uri.EscapeUriString(Request.GetDisplayUrl()) }))" title="@ViewData["Title"]">
                }

                <video class="w-full video" src="@rawUrl" controls autoplay></video>

                break;
            case Models.MediaType.Model:
            case Models.MediaType.Font:
            case Models.MediaType.UnknownOrNotSupported:
            default:

                <div class="flex flex-col items-center" style="min-height: 300px; height: 60vh;">

                    <div class="flex-grow self-stretch m-12 md:m-16 bg-contain bg-center bg-no-repeat" style="background-image: url(/assets/undraw_blank_canvas_3rbb.svg);"></div>

                    <div class="m-8 text-indigo-800">
                        Hmm, I don't know how to preview this one.
                        <br />
                        Try viewing the raw file or downloading it.
                    </div>
                </div>

                break;
        }

        @{
            var extraPadding =
                Model.MediaTypeCategory == MediaType.UnknownOrNotSupported
                || Model.MediaTypeCategory == MediaType.Text
                ? "m-2 shadow"
                : "";
        }

        <div class="flex items-center justify-between flex-wrap @extraPadding h-12">
            <h1 class="m-2 text-lg">
                @Model.Upload.Name<span class="text-gray-600">@Model.Upload.Extension</span>
            </h1>
            <div class="m-2 flex items-center md:justify-end">
                @if (Model.MediaTypeCategory == MediaType.Text && !string.IsNullOrWhiteSpace(Model.Upload.CodeLanguage))
                {
                    <span class="text-gray-400 mr-4">@Model.Upload.CodeLanguage</span>
                }

                <div class="flex items-stretch h-100">
                    <partial name="_UploadActionButtonsPartial" model="Model.Upload" />
                </div>
            </div>
        </div>
    </div>
</div>