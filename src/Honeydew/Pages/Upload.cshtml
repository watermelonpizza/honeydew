@page "/{id?}"
@using Honeydew.Models
@model Honeydew.Pages.UploadModel
@{
    ViewData["Title"] = "ViewUpload";
    ViewData["HideHeader"] = true;
}

<div class="flex justify-center">
    @if (Model.Upload == null)
    {
        <div class="my-16 text-center">
            <h1 class="text-2xl mb-4">Nothing here!</h1>
            <div class="text-gray-600">This upload is swimmin' with the fishes.</div>
        </div>

        return;
    }


    @if (Model.Upload.Status == UploadStatus.Pending)
    {
        @section Head {
            <meta http-equiv="refresh" content="1">
        }

        <div class="my-16 text-center">
            <h1 class="mx-16 text-2xl text-gray-600">A little too eager there.</h1>
            <div>
                I'm still ingesting the bits. Beep boop beep 00010111010100100100101110. The page will refresh until it's done.
            </div>
        </div>

        return;
    }

    @{
        var url = $"/{Model.Id}/raw";
    }

    <div class="upload-container flex flex-col items-stretch bg-white shadow-md">
        @switch (Model.MediaTypeCategory)
        {
            case Models.MediaType.Application:

                <object class="w-full" type="@Model.Upload.MediaType" data="@url"></object>

                break;
            case Models.MediaType.Audio:

                <audio src="@url" controls></audio>

                break;
            case Models.MediaType.Font:
                break;
            case Models.MediaType.Image:

                <div class="bg-no-repeat bg-center bg-contain" style="background-image: url(@url)"></div>

                break;
            case Models.MediaType.Model:


                break;
            case Models.MediaType.Text:

                <div id="monacoContainer" style="min-height: 70vh; max-height: 70vh;"></div>

                break;
            case Models.MediaType.Video:

                <video class="w-full" src="@url" controls></video>

                break;
            case Models.MediaType.UnknownOrNotSupported:
            default:

                <div class="flex flex-col items-center" style="min-height: 300px; height: 60vh;">

                    <div class="flex-grow self-stretch m-12 md:m-16 bg-contain bg-center bg-no-repeat" style="background-image: url(/assets/undraw_blank_canvas_3rbb.svg);"></div>

                    <div class="m-8 text-indigo-800">
                        Hmm, I don't know how to preview this one.
                        <br />
                        Try viewing the raw file or downloading it.
                    </div>
                </div>

                break;
        }

        @{
            var extraPadding =
                Model.MediaTypeCategory == MediaType.UnknownOrNotSupported
                || Model.MediaTypeCategory == MediaType.Text
                ? "m-2 shadow"
                : "";
        }

        <div class="flex items-center justify-between flex-wrap @extraPadding px-2 py-1">
            <h1 class="m-2 text-lg">
                @Model.Upload.Name<span class="text-gray-600">@Model.Upload.Extension</span>
            </h1>
            <div class="m-2 flex items-center md:justify-end">
                @if (Model.MediaTypeCategory == MediaType.Text && !string.IsNullOrWhiteSpace(Model.Upload.CodeLanguage))
                {
                    <span class="text-gray-400 mr-4">@Model.Upload.CodeLanguage</span>
                }

                <partial name="_UploadActionButtons" model="Model.Upload" />
            </div>
        </div>
    </div>
</div>

@if (Model.MediaTypeCategory == MediaType.Text)
{
    @section Scripts {
        <script src="~/js/monaco/loader.js"></script>
        <script>
            require.config({ paths: { 'vs': '/js/monaco/' } });

            require(['vs/editor/editor.main'], function () {
                fetch('@url')
                    .then(async res => {
                        const text = await res.text();
                        monaco.editor.create(document.getElementById('monacoContainer'), {
                            value: text,
                            language: `@Model.Upload.CodeLanguage`,
                            minimap: {
                                enabled: false
                            },
                            automaticLayout: true
                        });
                    })
                    .catch(err => console.error(err));
            });
        </script>
    }
}
